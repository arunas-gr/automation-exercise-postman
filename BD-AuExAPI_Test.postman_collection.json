{
	"info": {
		"_postman_id": "3221d193-3116-42f2-b080-7dd62455fa1d",
		"name": "Automation Excersice API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41078409"
	},
	"item": [
		{
			"name": "API 1: Get All Products List",
			"item": [
				{
					"name": "Get all products list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"status code is 200\", function () {\r",
									"    pm.expect(respData).to.have.property('responseCode').and.eq(200);\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"product IDs are unique\", function () {\r",
									"    const products = respData.products;\r",
									"    pm.expect(products).to.be.an(\"array\");\r",
									"\r",
									"const ids = products.map(function(product) {\r",
									"    return product.id;\r",
									"});\r",
									"\r",
									"// arba const ids = products.map(product => product.id);\r",
									"\r",
									"const uniqueIds = new Set(ids);\r",
									"pm.expect(uniqueIds.size).to.eql(ids.length);\r",
									"});\r",
									"\r",
									"pm.test(\"Products list is not empty and have at least one product with all properties\", () => {\r",
									"    pm.expect(respData).to.not.be.empty;\r",
									"    pm.expect(respData).to.have.property('products');\r",
									"    pm.expect(respData.products).to.be.an('array').that.is.not.empty;\r",
									"    respData.products.forEach((product) => {\r",
									"        pm.expect(product).to.have.property ('id');\r",
									"        pm.expect(product).to.have.property ('name');\r",
									"        pm.expect(product).to.have.property ('price');\r",
									"        pm.expect(product).to.have.property ('brand');\r",
									"        pm.expect(product).to.have.property ('category');\r",
									"        pm.expect(product.category).to.have.property ('usertype');\r",
									"        pm.expect(product.category.usertype).to.have.property ('usertype');\r",
									"        pm.expect(product.category).to.have.property ('category');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Products in list have correct types of property values\", () => {\r",
									"    respData.products.forEach((product) => {\r",
									"        pm.expect(product.id).to.be.a('number');\r",
									"        pm.expect(product.name).to.be.a('string');\r",
									"        pm.expect(product.price).to.be.a('string');\r",
									"        pm.expect(product.brand).to.be.a('string');\r",
									"        pm.expect(product.category).to.be.a('object');\r",
									"        pm.expect(product.category.usertype).to.be.a('object');\r",
									"        pm.expect(product.category.usertype.usertype).to.be.a('string');\r",
									"        pm.expect(product.category.category).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Reponse time is less than 1s\", () => {\r",
									"pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://automationexercise.com/api/productsList",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				}
			],
			"description": "#### [<u>API 1: Get All Products List</u>](https://www.automationexercise.com/api_list#collapse1)\n\n- **API URL:** [https://automationexercise.com/api/productsList](https://automationexercise.com/api/productsList)\n    \n- **Request Method:** GET\n    \n- **Response Code:** 200\n    \n- **Response JSON:** All products list"
		},
		{
			"name": "API 2: POST To All Products List",
			"item": [
				{
					"name": "Post to all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Server is Alive - replies with 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response code is 405\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('responseCode').and.eq(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.eql(\"This request method is not supported.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New Product\",\r\n  \"category\": \"Category Illegal\",\r\n  \"price\": 120.00,\r\n  \"description\": \"Here should be a description of what is called new product\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://automationexercise.com/api/productsList",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"productsList"
							]
						}
					},
					"response": []
				}
			],
			"description": "- **API URL:** [https://automationexercise.com/api/productsList](https://automationexercise.com/api/productsList)\n    \n- **Request Method:** POST\n    \n- **Response Code:** 405\n    \n- **Response Message:** This request method is not supported."
		},
		{
			"name": "API 3: Get All Brands List",
			"item": [
				{
					"name": "Get Brands list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Brands List API response\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Verify Brands Response to be JSON\", function() {\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Verify Brands Response to be an object\", function() {\r",
									"    pm.expect(respData).to.be.an('object');\r",
									"})\r",
									"\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('responseCode', 200);\r",
									"    pm.expect(jsonData).to.have.property('brands').that.is.an('array');\r",
									"    pm.expect(jsonData.brands[0]).to.have.all.keys('id', 'brand');\r",
									"});\r",
									"\r",
									"// pm.test('Get Brands List', () => {\r",
									"//     respData.brands.forEach((brand) => {\r",
									"//         pm.expect(brand).to.be.a('string');\r",
									"// })\r",
									"// })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://automationexercise.com/api/brandsList",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"brandsList"
							]
						}
					},
					"response": []
				}
			],
			"description": "- **API URL:** [https://automationexercise.com/api/brandsList](https://automationexercise.com/api/brandsList)\n    \n- **Request Method:** GET\n    \n- **Response Code:** 200\n    \n- **Response JSON:** All brands list"
		},
		{
			"name": "API 4: PUT To All Brands List",
			"item": [
				{
					"name": "PUT to all Brands List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Server is Alive - replies with 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Response code is 405\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('responseCode').and.eq(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    if (pm.response.status === 200) {\r",
									"        pm.expect(responseJson.message).to.eql(\"This request method is not supported.\");\r",
									"    } else {\r",
									"        pm.expect(responseJson.message).to.eql(\"This request method is not supported.\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New Product\",\r\n  \"category\": \"Category Illegal\",\r\n  \"price\": 120.00,\r\n  \"description\": \"Here should be a description of what is called new product ant is attempted to put on Brands List\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://automationexercise.com/api/brandsList",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"brandsList"
							]
						}
					},
					"response": []
				}
			],
			"description": "#### [<u>API 4: PUT To All Brands List</u>](https://automationexercise.com/api_list#collapse4)\n\n- **API URL:** [https://automationexercise.com/api/brandsList](https://automationexercise.com/api/brandsList)\n    \n- **Request Method:** PUT\n    \n- **Response Code:** 405\n    \n- **Response Message:** This request method is not supported.\n    \n\nEndFragment"
		},
		{
			"name": "API 5: POST To Search Product",
			"item": [
				{
					"name": "POST To Search Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains searched products\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.products).to.be.an('array');\r",
									"    pm.expect(responseJson.products.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Each product contains name or description matching search term\", function () {\r",
									"    const searchTerm = pm.request.body.urlencoded.find(param => param.key === \"search_product\")?.value;\r",
									"        if (searchTerm) {\r",
									"        const responseJson = pm.response.json();\r",
									"        responseJson.products.forEach(product => {\r",
									"             if (product.name) {\r",
									"                pm.expect(product.name.toLowerCase()).to.include(searchTerm.toLowerCase());\r",
									"            }\r",
									"            \r",
									"            if (product.description) {\r",
									"                pm.expect(product.description.toLowerCase()).to.include(searchTerm.toLowerCase());\r",
									"            }\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"Search term not found in request body\", function () {\r",
									"            pm.expect(searchTerm).to.not.be.undefined;\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Products list is not empty and have at least one product with all properties\", function () {\r",
									"    pm.expect(responseData).to.have.property('products').and.not.empty;\r",
									"    pm.expect(responseData.products).to.be.an('array').that.is.not.empty;\r",
									"    responseData.products.forEach((product) => {\r",
									"        pm.expect(product).to.have.property('id');\r",
									"        pm.expect(product).to.have.property('name');\r",
									"        pm.expect(product).to.have.property('price');\r",
									"        pm.expect(product).to.have.property('brand');\r",
									"        pm.expect(product).to.have.property('category');\r",
									"        pm.expect(product.category).to.have.property('usertype');\r",
									"        pm.expect(product.category.usertype).to.have.property('usertype');\r",
									"        pm.expect(product.category).to.have.property('category');\r",
									"     })\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "search_product",
									"value": "jeans",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://automationexercise.com/api/searchProduct",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"searchProduct"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API 6: POST To Search Product without search_product parameter",
			"item": [
				{
					"name": "POST To Search Product without search_product parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code is 200 or 400\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    if (pm.response.status === 200) {\r",
									"        const responseJson = pm.response.json();\r",
									"        pm.expect(responseJson.message).to.eql(\"Bad request, search_product parameter is missing in POST request.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct when missing parameter\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.eql(\"Bad request, search_product parameter is missing in POST request.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "https://automationexercise.com/api/searchProduct",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"searchProduct"
							]
						}
					},
					"response": []
				}
			],
			"description": "- **API URL:** [https://automationexercise.com/api/searchProduct](https://automationexercise.com/api/searchProduct)\n    \n- **Request Method:** POST\n    \n- **Response Code:** 400\n    \n- **Response Message:** Bad request, search_product parameter is missing in POST request."
		},
		{
			"name": "API 7: POST To Verify Login with valid details",
			"item": [
				{
					"name": "POST To Verify Login with valid details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response code is 200\", function () {\r",
									"    pm.expect(pm.response.json().responseCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body exists\", () => {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is 'User exists!'\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.eql(\"User exists!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "johndoe1982@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "P@s5w0rd8X!q",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://automationexercise.com/api/verifyLogin",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						}
					},
					"response": []
				}
			],
			"description": "- **API URL:** [https://automationexercise.com/api/verifyLogin](https://automationexercise.com/api/verifyLogin)\n    \n- **Request Method:** POST\n    \n- **Request Parameters:** email, password\n    \n- **Response Code:** 200\n    \n- **Response Message:** User exists!"
		},
		{
			"name": "API 8: POST To Verify Login without email parameter",
			"item": [
				{
					"name": "POST To Verify Login without email parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response code is 400\", () => {\r",
									"    pm.expect(responseData.responseCode).to.eq(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is 'Bad request, email or password parameter is missing in POST request.'\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.eql(\"Bad request, email or password parameter is missing in POST request.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "password",
									"value": "Bad_Password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://automationexercise.com/api/verifyLogin",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API 9: DELETE To Verify Login",
			"item": [
				{
					"name": "DELETE To Verify Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response code is 405\", function () {\r",
									"pm.expect(pm.response.json().responseCode).to.eql(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is 'This request method is not supported.'\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.eql(\"This request method is not supported.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://automationexercise.com/api/verifyLogin",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API 10: POST To Verify Login with invalid details",
			"item": [
				{
					"name": "API 10: POST To Verify Login with invalid details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response code is 404\", function () {\r",
									"    pm.expect(pm.response.json().responseCode).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is 'User not found!'\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.eql(\"User not found!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "bad_email@email.of.the.bad",
									"type": "text"
								},
								{
									"key": "password",
									"value": "WronG_pASSWORd",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://automationexercise.com/api/verifyLogin",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"verifyLogin"
							]
						}
					},
					"response": []
				}
			],
			"description": "- **API URL:** [https://automationexercise.com/api/verifyLogin](https://automationexercise.com/api/verifyLogin)\n    \n- **Request Method:** POST\n    \n- **Request Parameters:** email, password (invalid values)\n    \n- **Response Code:** 404\n    \n- **Response Message:** User not found!"
		},
		{
			"name": "API 11: POST To Create/Register User Account",
			"item": [
				{
					"name": "POST To Create/Register User Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response code is 201\", function () {\r",
									"    pm.expect(respData.responseCode).to.eql(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body exists\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is 'User created!'\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    // Check if the response message matches the expected \"User created!\" message\r",
									"    pm.expect(responseJson.message).to.eql(\"User created!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Jonas Ponas",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jono@mailas.cy",
									"type": "text"
								},
								{
									"key": "password",
									"value": "JonoSlaptazodis",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Mr",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "15",
									"type": "text"
								},
								{
									"key": "birth_month",
									"value": "liepa",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1901",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Jonas",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Ponas",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Veržlių tekinimas kosminiam laivui",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "Padangių g. 14",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "2 aukštas po žeme",
									"type": "text"
								},
								{
									"key": "country",
									"value": "Šiaurės Rodezija",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "123456",
									"type": "text"
								},
								{
									"key": "state",
									"value": "Rhode Island",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Bulawayo",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+1987654321",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://automationexercise.com/api/createAccount",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"createAccount"
							]
						}
					},
					"response": []
				}
			],
			"description": "- **API URL:** [https://automationexercise.com/api/createAccount](https://automationexercise.com/api/createAccount)\n    \n- **Request Method:** POST\n    \n- **Request Parameters:** name, email, password, title (for example: Mr, Mrs, Miss), birth_date, birth_month, birth_year, firstname, lastname, company, address1, address2, country, zipcode, state, city, mobile_number\n    \n- **Response Code:** 201\n    \n- **Response Message:** User created!"
		},
		{
			"name": "API 13: PUT METHOD To Update User Account",
			"item": [
				{
					"name": "PUT METHOD To Update User Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();\r",
									"\t\t\t\t\t\t\t\t\t\r",
									"\r",
									"pm.test(\"Response status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response code is 200\", function () {\r",
									"    pm.expect(responseData.responseCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body exists\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message correct\", function () {\r",
									"    pm.expect(responseData.message).to.eql(\"User updated!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "birth_month",
									"value": "Gruodis",
									"description": "keičiam",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Jonas Ponas",
									"description": "nekeičiam",
									"type": "text"
								},
								{
									"key": "email",
									"value": "jono@mailas.cy",
									"description": "nekeičiam",
									"type": "text"
								},
								{
									"key": "password",
									"value": "JonoSlaptazodis",
									"description": "nekeičiam",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Still defining",
									"description": "keičiam",
									"type": "text"
								},
								{
									"key": "birth_date",
									"value": "16",
									"description": "keičiam",
									"type": "text"
								},
								{
									"key": "birth_year",
									"value": "1902",
									"description": "keičiam",
									"type": "text"
								},
								{
									"key": "firstname",
									"value": "Jonas",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Ponas",
									"type": "text"
								},
								{
									"key": "company",
									"value": "Sraigių pramonės konfederacija",
									"type": "text"
								},
								{
									"key": "address1",
									"value": "Peklių g. 16",
									"type": "text"
								},
								{
									"key": "address2",
									"value": "butas 4",
									"type": "text"
								},
								{
									"key": "country",
									"value": "Tanganika",
									"type": "text"
								},
								{
									"key": "zipcode",
									"value": "123456",
									"type": "text"
								},
								{
									"key": "state",
									"value": "Morondava",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Bužumbūra",
									"type": "text"
								},
								{
									"key": "mobile_number",
									"value": "+236549874",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://automationexercise.com/api/updateAccount",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"updateAccount"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API 14: GET user account detail by email",
			"item": [
				{
					"name": "GET user account detail by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response code is 200\", function () {\r",
									"    pm.expect(responseData).to.have.property('responseCode').and.eq(200);\r",
									"})\r",
									"\r",
									"pm.test(\"User account details not empty\", function () {\r",
									"    pm.expect(responseData).to.have.property('user').and.not.empty;\r",
									"    pm.expect(responseData.user).to.be.an('object').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains user details\", function () {\r",
									"    pm.expect(responseData.user).to.be.an('object');\r",
									"    pm.expect(responseData.user).to.not.be.null;\r",
									"    pm.expect(responseData.user).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test(\"Respose contains email\", function () {\r",
									"    pm.expect(responseData.user).to.have.property('email');\r",
									"    pm.expect(responseData.user.email).to.be.a('string');  \r",
									"})\r",
									"\r",
									"pm.test(\"Email format is valid\", function () {\r",
									"    pm.expect(responseData.user.email).to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jono@mailas.cy",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://automationexercise.com/api/getUserDetailByEmail?email=jono@mailas.cy",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"getUserDetailByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "jono@mailas.cy"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "- **API URL:** [https://automationexercise.com/api/getUserDetailByEmail](https://automationexercise.com/api/getUserDetailByEmail)\n    \n- **Request Method:** GET\n    \n- **Request Parameters:** email\n    \n- **Response Code:** 200\n    \n- **Response JSON:** User Detail"
		},
		{
			"name": "PAI12: DELETE METHOD To Delete User Account",
			"item": [
				{
					"name": "DELETE METHOD To Delete User Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const respData = pm.response.json();\r",
									"\t\t\t\t\t\t\t\t\t\r",
									"\r",
									"pm.test(\"Response status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response code is 200\", function () {\r",
									"    pm.expect(respData.responseCode).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body exists\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response message correct\", function () {\r",
									"    pm.expect(respData.message).to.eql(\"Account deleted!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "jono@mailas.cy",
									"type": "text"
								},
								{
									"key": "password",
									"value": "JonoSlaptazodis",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://automationexercise.com/api/deleteAccount",
							"protocol": "https",
							"host": [
								"automationexercise",
								"com"
							],
							"path": [
								"api",
								"deleteAccount"
							]
						}
					},
					"response": []
				}
			],
			"description": "- **API URL:** [https://automationexercise.com/api/deleteAccount](https://automationexercise.com/api/deleteAccount)\n    \n- **Request Method:** DELETE\n    \n- **Request Parameters:** email, password\n    \n- **Response Code:** 200\n    \n- **Response Message:** Account deleted!"
		}
	]
}